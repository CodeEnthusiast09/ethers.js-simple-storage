/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface Contracts_storageFactory_sol_StorageFactoryInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "createSimpleStorageContract"
      | "simpleStorageArray"
      | "storageFactoryGet"
      | "storageFactoryStore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSimpleStorageContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simpleStorageArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storageFactoryGet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storageFactoryStore",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSimpleStorageContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleStorageArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storageFactoryGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storageFactoryStore",
    data: BytesLike
  ): Result;
}

export interface Contracts_storageFactory_sol_StorageFactory
  extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): Contracts_storageFactory_sol_StorageFactory;
  waitForDeployment(): Promise<this>;

  interface: Contracts_storageFactory_sol_StorageFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createSimpleStorageContract: TypedContractMethod<[], [void], "nonpayable">;

  simpleStorageArray: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  storageFactoryGet: TypedContractMethod<
    [_simpleStorageIndex: BigNumberish],
    [bigint],
    "view"
  >;

  storageFactoryStore: TypedContractMethod<
    [_simpleStorageIndex: BigNumberish, _simpleStorageNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createSimpleStorageContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "simpleStorageArray"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "storageFactoryGet"
  ): TypedContractMethod<[_simpleStorageIndex: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "storageFactoryStore"
  ): TypedContractMethod<
    [_simpleStorageIndex: BigNumberish, _simpleStorageNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
