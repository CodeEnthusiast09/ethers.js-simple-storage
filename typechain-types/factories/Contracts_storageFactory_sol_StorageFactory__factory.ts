/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  Contracts_storageFactory_sol_StorageFactory,
  Contracts_storageFactory_sol_StorageFactoryInterface,
} from "../Contracts_storageFactory_sol_StorageFactory";

const _abi = [
  {
    inputs: [],
    name: "createSimpleStorageContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "simpleStorageArray",
    outputs: [
      {
        internalType: "contract SimpleStorage",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_simpleStorageIndex",
        type: "uint256",
      },
    ],
    name: "storageFactoryGet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_simpleStorageIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_simpleStorageNumber",
        type: "uint256",
      },
    ],
    name: "storageFactoryStore",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class Contracts_storageFactory_sol_StorageFactory__factory {
  static readonly abi = _abi;
  static createInterface(): Contracts_storageFactory_sol_StorageFactoryInterface {
    return new Interface(
      _abi
    ) as Contracts_storageFactory_sol_StorageFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Contracts_storageFactory_sol_StorageFactory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Contracts_storageFactory_sol_StorageFactory;
  }
}
